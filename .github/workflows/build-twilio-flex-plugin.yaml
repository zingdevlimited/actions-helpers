name: "Build Twilio Flex Plugin and Publish Artifact"

on:
  workflow_call:
    inputs:
      PLUGIN_DIRECTORY:
        type: string
        required: true
        description: The path to the Flex Plugin base directory (where package.json is located)
      BUILD_COMMAND:
        type: string
        required: true
        description: The build command
      BUILD_COMMAND_DIRECTORY:
        type: string
        required: false
        description: (Optional) defaults to install directory
      INSTALL_DIRECTORY:
        type: string
        required: false
        default: .
        description: (Optional) The path to the directory to call yarn install in. Defaults to root
      INSTALL_FLAGS:
        type: string
        required: false
        description: (Optional) Override yarn install flags
        default: "--immutable"
      NODE_VERSION:
        type: string
        required: false
        description: (Optional) Override Node Version (Default to engines.node or 18 if not found)
      ARTIFACT_RETENTION_PERIOD:
        type: number
        required: false
        description: (Optional) Override the number of days (default 3 days) the build artifact is retained. Must be between 1-90 days
        default: 3
      YARN_DIRECTORY_PATH:
        type: string
        required: false
        description: (Optional) Set if the .yarn directory is outside of the INSTALL_DIRECTORY
      SKIP_CLI_INSTALL:
        type: boolean
        required: false
        description: |
          Set to `true` to skip the installation of Twilio CLI + Flex CLI.

          This can be used if your plugin build command uses `flex-plugin build` directly instead of the CLI command `twilio flex:plugins:build`.

          The install flags will have `--mode=skip-build` appended to them to avoid running the postinstall command that checks for the CLI installation.
        
jobs:
  build_flex_plugin:
    runs-on: ubuntu-22.04
    env:
      PLUGIN_DIR: ${{ inputs.PLUGIN_DIRECTORY != '' && inputs.PLUGIN_DIRECTORY || '.' }}
      INSTALL_DIR: ${{ inputs.INSTALL_DIRECTORY != '' && inputs.INSTALL_DIRECTORY || '.' }}
      NODE_VERSION: ${{ inputs.NODE_VERSION }}

    steps:
      - name: Resolve Input Paths
        run: |
          pluginDir="${{ inputs.PLUGIN_DIRECTORY }}"
          if [[ "$pluginDir" =~ \./.* ]]; then
            echo "PLUGIN_DIR=${pluginDir:2}" >> "$GITHUB_ENV"
          fi
          installDir="${{ inputs.INSTALL_DIRECTORY }}"
          if [[ "$installDir" =~ \./.* ]]; then
            echo "INSTALL_DIR=${installDir:2}" >> "$GITHUB_ENV"
          fi

      - name: Checkout ${{ github.repository }}@${{ github.ref_name }}
        uses: actions/checkout@v4
        with:
          path: main
          sparse-checkout: |
            ${{ env.INSTALL_DIR != '.' && env.INSTALL_DIR || '' }}
            ${{ inputs.YARN_DIRECTORY_PATH }}

      - name: Checkout zingdevlimited/actions-helpers@v3
        uses: actions/checkout@v4
        with:
          repository: zingdevlimited/actions-helpers
          path: helpers
          ref: v3

      - name: Resolve Dependencies
        run: |
          if [ "${{ env.INSTALL_DIR }}" == "." ]; then
            echo "CACHE_DEPENDENCY_PATH=main/yarn.lock" >> "$GITHUB_ENV"
          else
            echo "CACHE_DEPENDENCY_PATH=main/${{ env.INSTALL_DIR }}/yarn.lock" >> "$GITHUB_ENV"
          fi

          if [ -z "${{ inputs.NODE_VERSION }}" ]; then
            nodeVer=$(cat main/${{ env.PLUGIN_DIR }}/package.json | jq -r '.engines.node // empty')
            if [ -z "$nodeVer" ]; then
              nodeVer=$(cat main/${{ env.INSTALL_DIR }}/package.json | jq -r '.engines.node // empty')
            fi
            if [ -z "$nodeVer" ]; then
              nodeVer="18.x"
            fi
          fi
          echo "NODE_VERSION=$nodeVer" >> "$GITHUB_ENV"
  
      - name: Set up Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Setup Flex CLI
        if: ${{ inputs.SKIP_CLI_INSTALL != true }}
        uses: ./helpers/setup-flex-cli
        with:
          PLUGIN_DIRECTORY: main/${{ env.PLUGIN_DIR }}

      - name: Get Plugin Properties
        id: pluginProperties
        working-directory: main/${{ env.PLUGIN_DIR }}
        run: |
          PLUGIN_NAME=$(cat package.json | jq -r '.name')
          echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_OUTPUT
          PLUGIN_VERSION=$(cat package.json | jq -r '.version')
          echo "PLUGIN_VERSION=$PLUGIN_VERSION" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        working-directory: main/${{ env.INSTALL_DIR }}
        run: yarn install ${{ inputs.INSTALL_FLAGS }} ${{ inputs.SKIP_CLI_INSTALL == true && '--mode=skip-build' || '' }}

      - name: Copy Required Dependencies to Workspace
        if: ${{ inputs.SKIP_CLI_INSTALL == true && inputs.INSTALL_DIRECTORY != inputs.PLUGIN_DIRECTORY }}
        working-directory: main
        run: |
          requiredModules=(
            "@twilio/flex-ui"
            "react-dom"
            "react"
          )

          for module in "${requiredModules[@]}"; do
            mkdir -p "${{ env.PLUGIN_DIR }}/node_modules/$module"
            cp "${{ env.INSTALL_DIR }}/node_modules/$module/package.json" "${{ env.PLUGIN_DIR }}/node_modules/$module/package.json"
          done

      - name: Build ${{ steps.pluginProperties.outputs.PLUGIN_NAME }}
        working-directory: main/${{ inputs.BUILD_COMMAND_DIRECTORY != '' && inputs.BUILD_COMMAND_DIRECTORY || env.INSTALL_DIR }}
        run: ${{ inputs.BUILD_COMMAND }}
        env:
          TWILIO_ACCOUNT_SID: ACX # Dummy credentials for CLI. Not needed to build
          TWILIO_AUTH_TOKEN: X

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.pluginProperties.outputs.PLUGIN_NAME }}@${{ steps.pluginProperties.outputs.PLUGIN_VERSION }}"
          path: main/${{ env.PLUGIN_DIR }}/build
          retention-days: ${{ inputs.ARTIFACT_RETENTION_PERIOD }}
          if-no-files-found: error
