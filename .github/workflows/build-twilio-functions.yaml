name: "Build Twilio Functions Service and Publish Artifact"

on:
  workflow_call:
    inputs:
      SERVICE_DIRECTORY:
        type: string
        required: true
        description: The path to the Twilio Functions Service base directory (where package.json is located)
      BUILD_COMMAND:
        type: string
        required: true
        description: The build command
      BUILD_COMMAND_DIRECTORY:
        type: string
        required: false
        description: (Optional) defaults to install directory
      INSTALL_DIRECTORY:
        type: string
        required: false
        default: .
        description: (Optional) The path to the directory to call yarn install in. Defaults to root
      INSTALL_FLAGS:
        type: string
        required: false
        description: (Optional) Override yarn install flags
        default: "--immutable --mode=skip-build"
      NODE_VERSION:
        type: string
        required: false
        description: (Optional) Override Node Version (Default to engines.node or 22 if not found)
      ARTIFACT_RETENTION_PERIOD:
        type: number
        required: false
        description: (Optional) Override the number of days (default 3 days) the build artifact is retained. Must be between 1-90 days
        default: 3
      INCLUDE_VERSION_ASSET:
        type: boolean
        required: false
        description: (Optional) Set to true to add the package.json version to /version.txt
      YARN_DIRECTORY_PATH:
        type: string
        required: false
        description: (Optional) Set if the .yarn directory is outside of the INSTALL_DIRECTORY

jobs:
  build_twilio_functions:
    runs-on: ubuntu-24.04
    env:
      CACHE_DEPENDENCY_PATH: main/yarn.lock
      SERVICE_DIR: ${{ inputs.SERVICE_DIRECTORY != '' && inputs.SERVICE_DIRECTORY || '.' }}
      INSTALL_DIR: ${{ inputs.INSTALL_DIRECTORY != '' && inputs.INSTALL_DIRECTORY || '.' }}
      NODE_VERSION: ${{ inputs.NODE_VERSION }}

    steps:
      - name: Resolve Input Paths
        run: |
          pluginDir="${{ inputs.SERVICE_DIRECTORY }}"
          if [[ "$pluginDir" =~ \./.* ]]; then
            echo "PLUGIN_DIR=${pluginDir:2}" >> "$GITHUB_ENV"
          fi
          installDir="${{ inputs.INSTALL_DIRECTORY }}"
          if [[ "$installDir" =~ \./.* ]]; then
            echo "INSTALL_DIR=${installDir:2}" >> "$GITHUB_ENV"
          fi

      - name: Checkout ${{ github.repository }}@${{ github.ref_name }}
        uses: actions/checkout@v4
        with:
          path: main
          sparse-checkout: |
            ${{ env.INSTALL_DIR != '.' && env.INSTALL_DIR || '' }}
            ${{ inputs.YARN_DIRECTORY_PATH }}

      - name: Resolve Path Dependencies
        run: |
          serviceDir="${{ inputs.SERVICE_DIRECTORY }}"
          if [[ "$serviceDir" =~ \./.* ]]; then
            echo "SERVICE_DIR=${serviceDir:2}" >> "$GITHUB_ENV"
          fi
          installDir="${{ inputs.INSTALL_DIRECTORY }}"
          if [[ "$installDir" =~ \./.* ]]; then
            echo "INSTALL_DIR=${installDir:2}" >> "$GITHUB_ENV"
          fi

          if [ "${{ env.INSTALL_DIR }}" == "." ]; then
            echo "CACHE_DEPENDENCY_PATH=main/yarn.lock" >> "$GITHUB_ENV"
          else
            echo "CACHE_DEPENDENCY_PATH=main/${{ env.INSTALL_DIR }}/yarn.lock" >> "$GITHUB_ENV"
          fi

          if [ -z "${{ inputs.NODE_VERSION }}" ]; then
            nodeVer=$(cat main/${{ env.SERVICE_DIR }}/package.json | jq -r '.engines.node // empty')
            if [ -z "$nodeVer" ]; then
              nodeVer=$(cat main/${{ env.INSTALL_DIR }}/package.json | jq -r '.engines.node // empty')
            fi
            if [ -z "$nodeVer" ]; then
              nodeVer="22.x"
            fi
          fi
          echo "NODE_VERSION=$nodeVer" >> "$GITHUB_ENV"
  
      - name: Set up Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install Dependencies
        working-directory: main/${{ env.INSTALL_DIR }}
        run: yarn install ${{ inputs.INSTALL_FLAGS }}

      - name: Get package.json version
        id: version
        working-directory: main/${{ env.SERVICE_DIR }}
        run: |
          name=$(cat package.json | jq -r .name)
          version=$(cat package.json | jq -r .version)
          echo "NAME=$name" >> "$GITHUB_OUTPUT"
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"

      - name: Build ${{ steps.version.outputs.NAME }}
        working-directory: main
        run: |
          if [ -z "${{ inputs.BUILD_COMMAND_DIRECTORY }}" ]; then
            cd ${{ env.INSTALL_DIR }}
          else
            cd ${{ inputs.BUILD_COMMAND_DIRECTORY }}
          fi
          ${{ inputs.BUILD_COMMAND }}

      - name: Include Version Asset
        if: inputs.INCLUDE_VERSION_ASSET == true
        working-directory: main/${{ env.SERVICE_DIR }}
        run: |
          mkdir -p dist/assets
          printf "${{ steps.version.outputs.VERSION }}" > dist/assets/version.txt

      - name: Zip Build Artifact
        working-directory: main/${{ env.SERVICE_DIR }}
        run: |
          zip -q -X -y -r dist.zip dist/*

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.version.outputs.NAME }}@${{ steps.version.outputs.VERSION }}"
          path: main/${{ env.SERVICE_DIR }}/dist.zip
          retention-days: ${{ inputs.ARTIFACT_RETENTION_PERIOD }}
          if-no-files-found: error

      - name: Show Build Output
        working-directory: main/${{ env.SERVICE_DIR }}
        run: |
          buildTree=$(tree dist)
          echo "$buildTree"
          echo "## Built Twilio Functions ${{ steps.version.outputs.NAME }}@${{ steps.version.outputs.VERSION }}" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "$buildTree" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"